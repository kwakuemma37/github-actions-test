# actions are code or task that is already available and can be used in a workflow. Actions can be from an existing file or a repo


# environment variables 
# $GITHUB_SHA   commit id of the specific commit that triggered the workflow
# $GITHUB_REPOSITORY : the username and rpeository name
# $GITHUB_WORKSPACE : the workspace directory in which we're currently executing
# github.token #
name: actions workflow

on:  # we need to specify event as object instead of array so that we can set the specific type of event that triggers the workflow
 # push: # push does not have any type
  #schedule:
    ## this has the template of ( * * * * *) minute hour day month [day of week]. Check www.crontab.guru for usage
    ## NB: the shortest interval  is once every 5 minutes
   # -  cron: "0/5 * * * *"  # this runs every  5 minues
  #  - cron: "0/6 * * * *" # this runs every 6 minutes
  repository_dispatch: # this fires everytime a post request is sent to  a repo url (eg. github.com/username/repo/dispatch)
  pull_request:
    types: [closed, assigned, opened, reopened]


jobs:
  run-github-actions:
    runs-on: ubuntu-latest
    steps:
      - name: "list files"
        run: |
            pwd
            ls  
            echo "GITHUB_SHA env. variable"
            echo $GITHUB_SHA 
            echo "GITHUB_REPOSITORY env. variable"
            echo $GITHUB_REPOSITORY
            echo  "GITHUB_WORKSPACE  env. variable"
            echo $GITHUB_WORKSPACE
      - name : checkout
      # By default github does not clone a repo into the director of the virtual machine that the runner is using becuase
      # the files in the repo might not be needed by an action.
      # We need to checkout into the commit of a repo that the workflow needs
      # we could have used git cli to do that eg git clone or etc. but actions/checout make it easier
        uses: actions/checkout@v1
      - name: list files after checkout
        run: |
          pwd
          ls -a
            
      - name: hellow world js actions 
        id: greet # if wee need to reference a step in another it should be given an id

        # reference to an action; here we're using an action that is published on public github repo.
        # you can use a branch name after "@" eg. action@master
        # NB: using branch might fail because it might contain breaking changes. Using version might help
        # Using a commit ID is the safest because it will never change
        #
        uses: actions/hello-world-javascript-action@v1

        # the "with" key parameter is used to provide input to an action
        with:
          # here, we're providing value to who-to-greet key that is expected by the action
          who-to-greet: Kwaku
      - name: log Greetin time
        run: echo "${{steps.greet.outputs.time}}"  # we're echoing the time of when step with id "greet" was executed.  

        